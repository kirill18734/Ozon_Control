const scannedMap = new Map(); // –≤–º–µ—Å—Ç–æ Set, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
const RESEND_INTERVAL_MS = 3000; // –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã

function sendToServer(text) {
    fetch("http://127.0.0.1:4025/print", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ text })
    }).then(res => res.json())
      .then(data => console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", data))
      .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞:", err));
}

const observer = new MutationObserver((mutationsList) => {
    const now = Date.now();

    for (const mutation of mutationsList) {
        const newItems = mutation.target.querySelectorAll('[data-testid="logItemPlace"]');
        for (const item of newItems) {
            const code = item.textContent.trim();

            const lastSent = scannedMap.get(code);
            if (!lastSent || (now - lastSent > RESEND_INTERVAL_MS)) {
                scannedMap.set(code, now);
                console.log(lastSent ? "üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:" : "üì¶ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä:", code);
				
                sendToServer(code);
            }
        }
    }
});

function start() {
    const targetNode = document.querySelector('._logsWrapper_1igxv_7');
    if (targetNode) {
        observer.observe(targetNode, { childList: true, subtree: true });
        console.log("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ DOM");
    } else {
        console.warn("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫...");
        setTimeout(start, 1000);
    }
}

start();
