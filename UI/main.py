import sys
import threading
import webbrowser
import subprocess

from PySide6.QtCore import QSize
from PySide6.QtGui import QIcon
from PySide6.QtWidgets import QApplication, QMainWindow, QLabel, QWidget, QMessageBox
from PySide6.QtPrintSupport import QPrinterInfo
from PySide6 import QtCore, QtGui, QtWidgets

from ScreenToPrint.main import  main_neiro
from UI.ui_mainwindow import Ui_MainWindow

from config import DARK_STYLE, LIGHT_STYLE, load_config, save_config, Title_icon, Github_icon_black, Github_icon_white


# pyside6-uic application.ui -o ui_mainwindow.py
from PySide6.QtWidgets import QCheckBox
from PySide6.QtCore import QPropertyAnimation, QEasingCurve, Qt, Property
from PySide6.QtGui import QPainter, QColor, QMouseEvent

from local_print_server.print_number_goods import main_expansion
from print_text import status_printer


class ToggleSwitch(QCheckBox):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFixedSize(60, 30)
        self._circle_pos_internal = 3
        self.setCursor(Qt.PointingHandCursor)
        self.setFocusPolicy(Qt.NoFocus)

        self.animation = QPropertyAnimation(self, b"circle_position")
        self.animation.setDuration(200)
        self.animation.setEasingCurve(QEasingCurve.InOutQuad)

        self.stateChanged.connect(self.start_transition)

    def mouseReleaseEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.toggle()
        super().mouseReleaseEvent(event)

    def start_transition(self, value):
        start = self._circle_pos_internal
        end = self.width() - self.height() + 3 if value else 3

        self.animation.stop()
        self.animation.setStartValue(start)
        self.animation.setEndValue(end)
        self.animation.start()

    def paintEvent(self, event):
        p = QPainter(self)
        p.setRenderHint(QPainter.Antialiasing)
        p.setPen(Qt.NoPen)

        # –§–æ–Ω
        p.setBrush(QColor("darkgreen") if self.isChecked() else QColor("green"))
        p.drawRoundedRect(0, 0, self.width(), self.height(), self.height() / 2, self.height() / 2)

        # –ö—Ä—É–∂–æ–∫
        p.setBrush(QColor("#ffffff"))
        p.drawEllipse(int(self._circle_pos_internal), 3, self.height() - 6, self.height() - 6)

    def get_circle_position(self):
        return self._circle_pos_internal

    def set_circle_position(self, pos):
        self._circle_pos_internal = pos
        self.update()

    circle_position = Property(float, get_circle_position, set_circle_position)

# –ö–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class SnippingWidget(QtWidgets.QMainWindow):
    selection_done = QtCore.Signal(int, int, int, int)  # –°–∏–≥–Ω–∞–ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ (x, y, w, h)

    def __init__(self, parent=None):
        super(SnippingWidget, self).__init__(parent)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑—Ä–∞–º–æ—á–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setAttribute(QtCore.Qt.WA_NoSystemBackground, True)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        self.setStyleSheet("background:transparent;")
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

        self.outsideSquareColor = "red"
        self.squareThickness = 2

        self.start_point = QtCore.QPoint()
        self.end_point = QtCore.QPoint()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ ‚Äî –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    def mousePressEvent(self, event):
        self.start_point = event.pos()
        self.end_point = event.pos()
        self.update()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    def mouseMoveEvent(self, event):
        self.end_point = event.pos()
        self.update()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    def mouseReleaseEvent(self, QMouseEvent):
        r = QtCore.QRect(self.start_point, self.end_point).normalized()
        QtWidgets.QApplication.restoreOverrideCursor()
        self.hide()
        x, y, w, h = r.x(), r.y(), r.width(), r.height()
        self.selection_done.emit(x, y, w, h)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
        self.start_point = QtCore.QPoint()
        self.end_point = QtCore.QPoint()

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    def paintEvent(self, event):
        trans = QtGui.QColor(22, 100, 233)
        r = QtCore.QRectF(self.start_point, self.end_point).normalized()
        qp = QtGui.QPainter(self)
        trans.setAlphaF(0.2)
        qp.setBrush(trans)
        outer = QtGui.QPainterPath()
        outer.addRect(QtCore.QRectF(self.rect()))
        inner = QtGui.QPainterPath()
        inner.addRect(r)
        r_path = outer - inner
        qp.drawPath(r_path)
        qp.setPen(QtGui.QPen(QtGui.QColor(self.outsideSquareColor), self.squareThickness))
        trans.setAlphaF(0)
        qp.setBrush(trans)
        qp.drawRect(r)


# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.dot_animation_timer = QtCore.QTimer(self)
        self.dot_animation_timer.timeout.connect(self.update_label_dots)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.setWindowTitle("–ü–µ—á–∞—Ç—å —è—á–µ–µ–∫")
        self.setWindowIcon(QtGui.QIcon(Title_icon))

        self.ui.label_expansion.setText("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        self.ui.label_neiro.setText("–ù–µ–π—Ä–æ—Å–µ—Ç—å")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —á–µ–∫–±–æ–∫—Å
        self.ui.btn_select_run.deleteLater()

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        self.toggle_switch = ToggleSwitch(self.ui.frame)
        self.toggle_switch.setObjectName("btn_select_run")
        self.toggle_switch.setGeometry(QtCore.QRect(110, 20, 60, 30))  # —á—É—Ç—å —à–∏—Ä–µ
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        # True, –µ—Å–ª–∏ —Ä–µ–∂–∏–º 'neiro', –∏–Ω–∞—á–µ False
        self.toggle_switch.setChecked(load_config()['mode']== 'neiro')
        self.toggle_switch.stateChanged.connect(  lambda: self.save_change('neiro' if load_config().get("mode", "expansion") == 'expansion' else 'expansion'))
        # –ü—Ä–∏–Ω—Ç–µ—Ä
        self.ui.lable_title_printer.setText("–ü—Ä–∏–Ω—Ç–µ—Ä")
        self.ui.label_text_select_printer.setText("–í—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
        self.ui.btn_update_list_print.setText("‚Üª")
        self.ui.btn_update_list_print.clicked.connect(self.populate_printer_list)
        self.ui.btn_update_list_print.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")  # –≤—ã–ø–∞–¥–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞

        self.populate_printer_list()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        self.ui.select_printer.currentTextChanged.connect(self.save_change)

        self.ui.label_title_window.setText("–û–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞")

        self.ui.btn_show.setText("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å")
        self.ui.btn_show.clicked.connect(self.show_saved_area)

        self.ui.btn_change.setText("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        self.ui.btn_change.clicked.connect(self.activate_snipping)
        self.ui.btn_github.setIconSize(QSize(24, 24))
        self.snipper = SnippingWidget()
        self.snipper.selection_done.connect(self.save_change)

        # –£–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        self.update_area_buttons_state(load_config().get("mode", "expansion"))

        self.countdown_label = QLabel("", self)
        self.countdown_label.setAlignment(QtCore.Qt.AlignCenter)
        self.countdown_label.setStyleSheet("font-size: 48px; color: white; background-color: rgba(0, 0, 0, 160);")
        self.countdown_label.setVisible(False)
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_countdown)
        self.countdown = 3

        self.btn_is_running(load_config().get("is_running", False))
        self.ui.btn_enable.clicked.connect(lambda: self.save_change(True))

        self.apply_theme(load_config().get("theme", "light"))  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.ui.btn_change_them.clicked.connect(
            lambda: self.save_change('dark' if load_config().get("theme", "light") == 'light' else 'light'))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        self.ui.btn_help.setText("‚Ñπ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É GitHub
        self.ui.btn_github.clicked.connect(self.open_github)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è
        self.ui.btn_help.clicked.connect(self.show_help_info)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.ui.label_title_update.setText("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.ui.btn_update_repo.setText("–û–±–Ω–æ–≤–∏—Ç—å")
        self.ui.btn_update_repo.clicked.connect(self.update_repo)
        self.check_for_updates()

        config = load_config()
        is_running = config.get("is_running", False)
        self.btn_is_running(is_running)

        if is_running:
            self.start_backend()

        self.check_config_state()
        self.status_timer = QtCore.QTimer(self)
        self.status_timer.timeout.connect(self.check_config_state)
        self.status_timer.start(1000)  # \u0440\u0430\u0437 \u0432 2 \u0441\u0435\u043a\u0443\u043d\u0434\u044b
    def open_github(self):
        webbrowser.open("https://github.com/kirill18734/Ozon_Control")

    def show_help_info(self):
        QMessageBox.information(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "üîç –≠—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è Windows, –∫–æ—Ç–æ—Ä–∞—è:\n\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –Ω–æ–º–µ—Ä (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç) —Å –ø–æ–º–æ—â—å—é Tesseract OCR\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä, –∑–∞–¥–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö, —á–µ–∫–∞—Ö –∏ —Ç.–¥."
        )

    def start_backend(self):
        if not hasattr(self, 'backend_thread') or not self.backend_thread.is_alive():
            if load_config()['mode'] == 'neiro':
                self.backend_thread = threading.Thread(target=main_neiro, daemon=True)
                self.backend_thread.start()
                print("[INFO] –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
            else:
                self.backend_thread = threading.Thread(target=main_expansion, daemon=True)
                self.backend_thread.start()
                print("[INFO] –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
        else:
            print("[INFO] –ë—ç–∫–µ–Ω–¥ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


    def update_label_dots(self):
        base_text = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        dots = "." * (self.dot_animation_step % 4)  # "", ".", "..", "..."
        self.ui.label_title_is_running.setText(f"{base_text}{dots}")
        self.dot_animation_step += 1

    def btn_is_running(self, is_running):
        if is_running:
            self.dot_animation_step = 0
            self.dot_animation_timer.start(500)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ label
            self.ui.btn_enable.setText(f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.ui.btn_enable.setStyleSheet("""
                QPushButton#btn_enable  {
                    background-color: red;
                    color: white;
                    border-radius: 6px;
                    padding: 6px 12px;
                    font-weight: bold;
                }
                QPushButton#btn_enable:hover {
                    background-color: darkred;
                }
            """)

        else:
            self.ui.label_title_is_running.setText("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.ui.btn_enable.setText(f"–ó–∞–ø—É—Å—Ç–∏—Ç—å")
            self.ui.btn_enable.setStyleSheet("""
                QPushButton#btn_enable {
                    background-color: green;
                    color: white;
                    border-radius: 6px;
                    padding: 6px 12px;
                    font-weight: bold;
                }
                QPushButton#btn_enable:hover {
                    background-color: darkgreen;
                }
            """)
            self.dot_animation_timer.stop()

    def update_area_buttons_state(self, mode):
        is_neiro = mode == 'neiro'
        self.ui.btn_show.setEnabled(is_neiro)
        self.ui.btn_change.setEnabled(is_neiro)

    def save_change(self, *args):
        config = load_config()
        if len(args) == 1 and args[0] not in ('dark', 'light') and args[0] not in (False, True) and args[0] not in ('expansion', 'neiro'):
            config["printer"] = args[0]
        if args[0] in ('dark', 'light'):
            config["theme"] = args[0]
            self.apply_theme(args[0])
        if args[0] in ('expansion', 'neiro'):
            config["is_running"] = False  # ‚õî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            config["mode"] = args[0]  # üíæ —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞
            self.btn_is_running(False)  # üîò –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.update_area_buttons_state(args[0])

        if len(args) == 1 and args[0] in (False, True):
            config["is_running"] = not config.get("is_running", False)
            self.btn_is_running(config["is_running"])
            save_config(config)
            if config["is_running"]:
                self.start_backend()
                print("[INFO] –ë—ç–∫–µ–Ω–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é")
            else:
                print("[INFO] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–∞–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–ª–∞–≥–∞")

        if len(args) > 1:
            config["area"] = {"x": args[0], "y": args[1], "width": args[2], "height": args[3]}
            self.show()
            self.adjustSize()

        save_config(config)
        self.check_config_state()

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ
    def populate_printer_list(self):
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è save_change
        self.ui.select_printer.blockSignals(True)

        self.ui.select_printer.clear()
        printers = QPrinterInfo.availablePrinters()
        printer_names = [printer.printerName() for printer in printers]
        self.ui.select_printer.addItems(printer_names)

        saved_printer = load_config().get("printer", "")
        if saved_printer and saved_printer in printer_names:
            index = self.ui.select_printer.findText(saved_printer)
            self.ui.select_printer.setCurrentIndex(index)
        else:
            self.ui.select_printer.setCurrentIndex(-1)

        # –°–Ω–æ–≤–∞ –≤–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
        self.ui.select_printer.blockSignals(False)

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
    def activate_snipping(self):
        self.countdown = 3
        self.countdown_label.setGeometry(self.rect())
        self.countdown_label.setText(str(self.countdown))
        self.countdown_label.setVisible(True)
        self.timer.start(1000)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    def update_countdown(self):
        self.countdown -= 1
        if self.countdown <= 0:
            self.timer.stop()
            self.countdown_label.setVisible(False)
            self.snipper.showFullScreen()
            QtWidgets.QApplication.setOverrideCursor(QtCore.Qt.CrossCursor)
            self.hide()
        else:
            self.countdown_label.setText(str(self.countdown))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    def check_config_state(self):
        config = load_config()

        area = config.get("area", {})
        cooridname = next((key for key in area if area.get(key, 0) != 0), False)

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        self.update_area_buttons_state(config.get("mode", "expansion"))

        if config.get('printer', '') == '':
            self.ui.label_error_printer.setText("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
        elif  status_printer():
            self.ui.label_error_printer.setText("–ü—Ä–∏–Ω—Ç–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            self.ui.label_error_printer.setText("")

        if not cooridname:
            self.ui.label_error_show.setText("–û–±–ª–∞—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            self.ui.label_error_show.setText("")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤ –≤–∏–¥–µ –∑–µ–ª–µ–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    def show_saved_area(self):
        config = load_config()
        area = config.get("area", {})

        if not all(k in area and area[k] > 0 for k in ("x", "y", "width", "height")):
            print("‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
            return

        self.overlay = QWidget()
        self.overlay.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        self.overlay.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.overlay.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.overlay.showFullScreen()
        self.overlay.paintEvent = lambda event: self.paint_saved_area(event, area)

        QtCore.QTimer.singleShot(1500, self.overlay.close)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    def paint_saved_area(self, event, area):
        painter = QtGui.QPainter(self.overlay)
        painter.fillRect(self.overlay.rect(), QtGui.QColor(0, 0, 0, 100))
        pen = QtGui.QPen(QtGui.QColor("green"))
        pen.setWidth(3)
        painter.setPen(pen)
        painter.setBrush(QtGui.QColor(0, 255, 0, 50))
        rect = QtCore.QRect(area["x"], area["y"], area["width"], area["height"])
        painter.drawRect(rect)

    # --- –†–∞–±–æ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ---
    def get_local_commit(self):
        try:
            return subprocess.check_output(["git", "rev-parse", "HEAD"], text=True).strip()
        except Exception:
            return ""

    def get_remote_commit(self):
        try:
            subprocess.run(["git", "fetch"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
            return subprocess.check_output(["git", "rev-parse", "@{u}"], text=True).strip()
        except Exception:
            return self.get_local_commit()

    def check_for_updates(self):
        config = load_config()
        local = config.get("version", self.get_local_commit())
        remote = self.get_remote_commit()
        if remote and remote != local:
            self.ui.btn_update_repo.setVisible(True)
            self.ui.label_title_update.setVisible(True)
        else:
            self.ui.btn_update_repo.setVisible(False)
            self.ui.label_title_update.setVisible(False)

    def update_repo(self):
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è,
            # —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –º–µ—à–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            subprocess.run(["git", "stash", "--include-untracked"],
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL)
            subprocess.run(["git", "pull"], check=True)
            subprocess.run(["git", "stash", "pop"],
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL)
            new_ver = self.get_local_commit()
            config = load_config()
            config["version"] = new_ver
            save_config(config)
            self.ui.btn_update_repo.setVisible(False)
            self.ui.label_title_update.setVisible(False)
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {e}")

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã (—Å–≤–µ—Ç–ª–∞—è –∏–ª–∏ —Ç—ë–º–Ω–∞—è)
    def apply_theme(self, theme):
        if theme == "dark":
            self.setStyleSheet(DARK_STYLE)
            self.ui.btn_change_them.setText("‚òÄÔ∏è")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤—Ä—É—á–Ω—É—é
            self.ui.btn_github.setIcon(QIcon(Github_icon_white))

        else:
            self.setStyleSheet(LIGHT_STYLE)
            self.ui.btn_change_them.setText("üåô")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤—Ä—É—á–Ω—É—é
            self.ui.btn_github.setIcon(QIcon(Github_icon_black))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
def run():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    run()
