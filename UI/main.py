import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QLabel, QWidget
from PySide6.QtPrintSupport import QPrinterInfo
from PySide6 import QtCore, QtGui, QtWidgets
from UI.ui_mainwindow import Ui_MainWindow
import threading
from ScreenToPrint.main import main  # –≤–∞—à–∞ —Ñ–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
from PySide6.QtWidgets import QInputDialog, QMessageBox, QPushButton

from config import DARK_STYLE, LIGHT_STYLE, load_config


# pyside6-uic application.ui -o ui_mainwindow.py

# –ö–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class SnippingWidget(QtWidgets.QMainWindow):
    selection_done = QtCore.Signal(int, int, int, int)  # –°–∏–≥–Ω–∞–ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ (x, y, w, h)

    def __init__(self, parent=None):
        super(SnippingWidget, self).__init__(parent)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑—Ä–∞–º–æ—á–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setAttribute(QtCore.Qt.WA_NoSystemBackground, True)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        self.setStyleSheet("background:transparent;")
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

        self.outsideSquareColor = "red"
        self.squareThickness = 2

        self.start_point = QtCore.QPoint()
        self.end_point = QtCore.QPoint()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ ‚Äî –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    def mousePressEvent(self, event):
        self.start_point = event.pos()
        self.end_point = event.pos()
        self.update()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    def mouseMoveEvent(self, event):
        self.end_point = event.pos()
        self.update()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    def mouseReleaseEvent(self, QMouseEvent):
        r = QtCore.QRect(self.start_point, self.end_point).normalized()
        QtWidgets.QApplication.restoreOverrideCursor()
        self.hide()
        x, y, w, h = r.x(), r.y(), r.width(), r.height()
        self.selection_done.emit(x, y, w, h)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
        self.start_point = QtCore.QPoint()
        self.end_point = QtCore.QPoint()

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    def paintEvent(self, event):
        trans = QtGui.QColor(22, 100, 233)
        r = QtCore.QRectF(self.start_point, self.end_point).normalized()
        qp = QtGui.QPainter(self)
        trans.setAlphaF(0.2)
        qp.setBrush(trans)
        outer = QtGui.QPainterPath()
        outer.addRect(QtCore.QRectF(self.rect()))
        inner = QtGui.QPainterPath()
        inner.addRect(r)
        r_path = outer - inner
        qp.drawPath(r_path)
        qp.setPen(QtGui.QPen(QtGui.QColor(self.outsideSquareColor), self.squareThickness))
        trans.setAlphaF(0)
        qp.setBrush(trans)
        qp.drawRect(r)


# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –ø–µ—á–∞—Ç–∏")

        # –ü—Ä–∏–Ω—Ç–µ—Ä
        self.ui.lable_title_printer.setText("–ü—Ä–∏–Ω—Ç–µ—Ä")
        self.ui.label_text_select_printer.setText("–í—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
        self.ui.btn_update_list_print.setText("‚Üª")

        self.populate_printer_list()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        self.ui.btn_update_list_print.clicked.connect(self.populate_printer_list)

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥

        # self.update_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤", self)
        # self.update_button.clicked.connect(self.populate_printer_list)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞–∂–∞—Ç–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏
        # self.update_button.setGeometry(10, 10, 200, 30)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏
        # self.ui.select_printer.currentTextChanged.connect(self.save_selected_printer)

        # self.ui.label_title_window.setText("–û–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞")
        #
        #
        #
        # self.ui.btn_show.setText("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å")
        # self.ui.btn_change.setText("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        # self.ui.btn_enable.setText("–í–∫–ª—é—á–∏—Ç—å")
        #
        #
        #
        #
        # self.populate_format_number_list()  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–æ–≤
        #
        # self.check_config_state()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        #
        # # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        #
        # self.ui.btn_change.clicked.connect(self.activate_snipping)
        # self.ui.btn_show.clicked.connect(self.show_saved_area)
        # self.ui.pushButton.clicked.connect(self.toggle_theme)
        #
        # self.snipper = SnippingWidget()
        # self.snipper.selection_done.connect(self.on_area_selected)
        #
        # # –ú–µ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±–ª–∞—Å—Ç–∏
        # self.countdown_label = QLabel("", self)
        # self.countdown_label.setAlignment(QtCore.Qt.AlignCenter)
        # self.countdown_label.setStyleSheet("font-size: 48px; color: white; background-color: rgba(0, 0, 0, 160);")
        # self.countdown_label.setVisible(False)
        # self.timer = QtCore.QTimer(self)
        # self.timer.timeout.connect(self.update_countdown)
        # self.countdown = 3
        #
        # self.apply_theme(load_config().get("theme", "light"))  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ
    def populate_printer_list(self):
        self.ui.select_printer.clear()
        printers = QPrinterInfo.availablePrinters()
        printer_names = [printer.printerName() for printer in printers]
        self.ui.select_printer.addItems(printer_names)
        saved_printer = load_config().get("printer", "")
        if saved_printer and saved_printer in printer_names:
            index = self.ui.select_printer.findText(saved_printer)
            self.ui.select_printer.setCurrentIndex(index)
        else:
            print(self.ui.select_printer.setCurrentIndex(-1))
            self.ui.select_printer.setCurrentIndex(-1)

    def populate_format_number_list(self):
        self.ui.select_format_number.clear()
        self.printer_names = ["777-777", "777", "–î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç"]
        self.ui.select_format_number.addItems(self.printer_names)

        saved_format = self.load_config().get("search_number", "")
        if saved_format and saved_format in self.printer_names:
            index = self.ui.select_format_number.findText(saved_format)
            self.ui.select_format_number.setCurrentIndex(index)
        elif saved_format:
            self.ui.select_format_number.insertItem(0, saved_format)
            self.ui.select_format_number.setCurrentIndex(0)
            self.printer_names.insert(0, saved_format)
        else:
            self.ui.select_format_number.setCurrentIndex(-1)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        self.ui.select_format_number.currentTextChanged.connect(self.on_format_number_changed)

    def restore_previous_format_selection(self):
        saved_format = self.load_config().get("search_number", "")
        if saved_format in self.printer_names:
            index = self.ui.select_format_number.findText(saved_format)
            self.ui.select_format_number.setCurrentIndex(index)
        else:
            self.ui.select_format_number.setCurrentIndex(-1)

    def on_format_number_changed(self, text):
        if text == "–î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç":
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å "–î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç"
            self.ui.select_format_number.blockSignals(True)

            format_text, ok = QInputDialog.getText(self, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç", "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞:")
            if ok and format_text:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if format_text not in self.printer_names:
                    self.ui.select_format_number.insertItem(0, format_text)
                    self.printer_names.insert(0, format_text)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
                index = self.ui.select_format_number.findText(format_text)
                self.ui.select_format_number.setCurrentIndex(index)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
                self.save_selected_search_number(format_text)

                QMessageBox.information(self, "–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç", f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç: {format_text}")
            else:
                self.restore_previous_format_selection()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
            self.ui.select_format_number.blockSignals(False)
        else:
            # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            self.save_selected_search_number(text)

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
    def activate_snipping(self):
        self.countdown = 3
        self.countdown_label.setGeometry(self.rect())
        self.countdown_label.setText(str(self.countdown))
        self.countdown_label.setVisible(True)
        self.timer.start(1000)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    def update_countdown(self):
        self.countdown -= 1
        if self.countdown <= 0:
            self.timer.stop()
            self.countdown_label.setVisible(False)
            self.snipper.showFullScreen()
            QtWidgets.QApplication.setOverrideCursor(QtCore.Qt.CrossCursor)
            self.hide()
        else:
            self.countdown_label.setText(str(self.countdown))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥
    def on_area_selected(self, x, y, w, h):
        config = self.load_config()
        config["area"] = {"x": x, "y": y, "width": w, "height": h}
        self.save_config(config)
        self.show()
        self.adjustSize()
        self.check_config_state()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    def check_config_state(self):
        config = self.load_config()

        if config.get('printer', '') == '':
            self.ui.label_error_printer.setText("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
        else:
            self.ui.label_error_printer.setText("")

        area = config.get("area", {})
        cooridname = next((key for key in area if area.get(key, 0) != 0), False)
        if not cooridname:
            self.ui.label_error_show.setText("–û–±–ª–∞—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            self.ui.label_error_show.setText("")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤ –≤–∏–¥–µ –∑–µ–ª–µ–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    def show_saved_area(self):
        config = self.load_config()
        area = config.get("area", {})

        if not all(k in area and area[k] > 0 for k in ("x", "y", "width", "height")):
            print("‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
            return

        self.overlay = QWidget()
        self.overlay.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        self.overlay.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.overlay.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.overlay.showFullScreen()
        self.overlay.paintEvent = lambda event: self.paint_saved_area(event, area)

        QtCore.QTimer.singleShot(1500, self.overlay.close)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    def paint_saved_area(self, event, area):
        painter = QtGui.QPainter(self.overlay)
        painter.fillRect(self.overlay.rect(), QtGui.QColor(0, 0, 0, 100))
        pen = QtGui.QPen(QtGui.QColor("green"))
        pen.setWidth(3)
        painter.setPen(pen)
        painter.setBrush(QtGui.QColor(0, 255, 0, 50))
        rect = QtCore.QRect(area["x"], area["y"], area["width"], area["height"])
        painter.drawRect(rect)

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç—ë–º–Ω–æ–π —Ç–µ–º–∞–º–∏
    def toggle_theme(self):
        config = self.load_config()
        current = config.get("theme", "light")
        new_theme = "dark" if current == "light" else "light"
        config["theme"] = new_theme
        self.save_config(config)
        self.apply_theme(new_theme)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã (—Å–≤–µ—Ç–ª–∞—è –∏–ª–∏ —Ç—ë–º–Ω–∞—è)
    def apply_theme(self, theme):
        if theme == "dark":
            self.setStyleSheet(DARK_STYLE)
            self.ui.pushButton.setText("‚òÄÔ∏è")
        else:
            self.setStyleSheet(LIGHT_STYLE)
            self.ui.pushButton.setText("üåô")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
def run():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())


run()
