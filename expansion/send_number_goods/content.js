const scannedSet = new Set(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

function isValidCode(code) {
    return /^\d{3,}-\d+$/.test(code); // –ü—Ä–∏–º–µ—Ä: 422-4352
}

function sendToServer(text) {
    fetch("http://127.0.0.1:4025/print", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ text })
    })
    .then(res => res.json())
    .then(data => console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", data))
    .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞:", err));
}

const observer = new MutationObserver((mutationsList) => {
    for (const mutation of mutationsList) {
        const newItems = mutation.target.querySelectorAll('[data-testid="logItemPlace"]');
        for (const item of newItems) {
            const code = item.textContent.trim();

            if (!isValidCode(code)) {
                console.warn("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:", code);
                continue;
            }

            if (scannedSet.has(code)) {
                console.log("üîÅ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ:", code);
                continue;
            }

            scannedSet.add(code);
            console.log("üì¶ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä:", code);
            sendToServer(code);
        }
    }
});

function start() {
    const targetNode = document.querySelector('._logsWrapper_1igxv_7');
    if (targetNode) {
        observer.observe(targetNode, { childList: true, subtree: true });
        console.log("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ DOM");
    } else {
        console.warn("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫...");
        setTimeout(start, 1000);
    }
}

start();
